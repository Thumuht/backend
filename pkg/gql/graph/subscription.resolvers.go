package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"backend/pkg/db"
	"backend/pkg/gql/graph/model"
	"backend/pkg/utils"
	"context"
	"fmt"
	"time"
)

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.MyTime, error) {
	ch := make(chan *model.MyTime)
	go func() {
		for {
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			// Prepare your object.
			currentTime := time.Now()
			t := &model.MyTime{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}

			// The channel may have gotten closed due to the client disconnecting.
			// To not have our Goroutine block or panic, we do the send in a select block.
			// This will jump to the default case if the channel is closed.
			select {
			case ch <- t: // This is the actual send.
				// Our message went through, do nothing
			default: // This is run when our send does not work.
				fmt.Println("Channel closed.")
				// You can handle any deregistration of the channel here.
				return // We'll just return ending the routine.
			}
		}
	}()

	return ch, nil
}

// MessageToMe is the resolver for the messageToMe field.
func (r *subscriptionResolver) MessageToMe(ctx context.Context) (<-chan *db.Message, error) {
	meTok, err := utils.GetMe(ctx)
	if err != nil {
		return nil, err
	}

	meId, _ := r.Cache.Sessions.Get(meTok)

	if _, ok := r.Cache.Notifier.Get(*meId); !ok {
		r.Cache.Notifier.Set(*meId, make(chan *db.Message))
	}

	ch, _ := r.Cache.Notifier.Get(*meId)
	return *ch, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
