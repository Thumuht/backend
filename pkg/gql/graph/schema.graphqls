# directive & helper
directive @goModel(
	model: String
	models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
	forceResolver: Boolean
	name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
	key: String!
	value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time

# GraphQL schema

type Comment @goModel(
  model: "backend/pkg/db.Comment"
){
  id: Int!
  content: String
  like: Int
  createdAt: Time
  updatedAt: Time

  user: User
  post: Post
  attachment: [Attachment]
}

input NewComment {
  userId: Int!
  postId: Int!
  content: String
}

input UpdateComment {
  commentId: Int!
  content: String
}


type Mutation {
  createComment(input: NewComment!): Comment!            @login

  deleteComment(input: Int!): Boolean!                   @login

  updateComment(input: UpdateComment!): Comment!         @login

  likeComment(input: Int!): Boolean!                     @login
  dislikeComment(input: Int!): Boolean!                  @login
}

enum CommentOrderBy {
  comment_id
  content
  like
  created_at
  updated_at
}

enum Order {
  ASC
  DESC
}

input GetCommentInput {
  limit: Int! = 10
  offset: Int! = 0
  orderBy: CommentOrderBy! = comment_id
  order: Order! = ASC
}


type Query {
  comment(input: GetCommentInput!): [Comment!]!
}