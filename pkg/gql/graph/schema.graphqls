# directive & helper
directive @goModel(
	model: String
	models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
	forceResolver: Boolean
	name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
	key: String!
	value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time

# GraphQL schema

type User @goModel(
  model: "backend/pkg/db.User"
){
  id: Int!
  loginName: String!
  nickname: String
  password: String
  email: String
  about: String

  post: [Post]
  comment: [Comment]
}

type Post @goModel(
  model: "backend/pkg/db.Post"
){
  id: Int!
  title: String
  content: String
  view: Int
  like: Int
  createdAt: Time
  updatedAt: Time

  user: User
  comment: [Comment]
}

type Comment @goModel(
  model: "backend/pkg/db.Comment"
){
  id: Int!
  content: String
  like: Int
  createdAt: Time
  updatedAt: Time
  
  user: User
  post: Post
}


input NewUser {
  loginName: String!
  password: String!
}

input NewPost {
  userId: Int!
  title: String
  content: String
}

input NewComment {
  userId: Int!
  postId: Int!
  content: String
}

input UpdatePost {
  postId: Int!
  title: String
  content: String
}

input UpdateComment {
  commentId: Int!
  content: String
}

type Mutation {
  createUser (input: NewUser!): User!
  createPost(input: NewPost!): Post!                     @login
  createComment(input: NewComment!): Comment!            @login

  deleteUser(input: Int!): Boolean!                      @login
  deletePost(input: Int!): Boolean!                      @login
  deleteComment(input: Int!): Boolean!                   @login

  updatePost(input: UpdatePost!): Post!                  @login
  updateComment(input: UpdateComment!): Comment!         @login
  likePost(input: Int!): Boolean!                        @login
  likeComment(input: Int!): Boolean!                     @login
}

enum UserOrderBy {
  user_id
  nickname
}

enum PostOrderBy {
  post_id
  title
  content
  view
  like
  userId
  created_at
  updated_at
}

enum CommentOrderBy {
  comment_id
  content
  like
  created_at
  updated_at
}

enum Order {
  ASC
  DESC
}

input GetUserInput {
  limit: Int! = 10
  offset: Int! = 0
  orderBy: UserOrderBy! = user_id
  order: Order! = ASC
}

input GetPostInput {
  limit: Int! = 10
  offset: Int! = 0
  orderBy: PostOrderBy! = post_id
  order: Order! = ASC
}

input GetCommentInput {
  limit: Int! = 10
  offset: Int! = 0
  orderBy: CommentOrderBy! = comment_id
  order: Order! = ASC
}


type Query {
  users(input: GetUserInput!): [User!]!
  posts(input: GetPostInput!): [Post!]!
  postDetail(input: Int!): Post!
  comment(input: GetCommentInput!): [Comment!]!
}