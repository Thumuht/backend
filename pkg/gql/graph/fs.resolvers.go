package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"backend/pkg/db"
	"backend/pkg/gql/graph/model"
	"context"
	"fmt"
	"path"

	"io"
	"os"

	"github.com/spf13/viper"
)

// FileUpload is the resolver for the fileUpload field.
func (r *mutationResolver) FileUpload(ctx context.Context, input *model.PostUpload) (bool, error) {
	content, err := io.ReadAll(input.Upload.File)
	if err != nil {
		return false, err
	}

	attach := &db.Attachment{
		FileName: input.Upload.Filename,
		PostID:   int32(input.PostID),
	}
	_, err = r.DB.NewInsert().Model(attach).Exec(ctx)
	if err != nil {
		return false, err
	}
	fmt.Printf("[GQL] write file %s", path.Join(viper.GetString("fs_route"), input.Upload.Filename))
	os.WriteFile(path.Join(viper.GetString("fs_route"), input.Upload.Filename), content, 0666)

	return true, nil
}
